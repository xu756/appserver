// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: login.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoginRpcClient is the client API for LoginRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginRpcClient interface {
	// 手机号登录
	MiniLoginByMobile(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 小程序登录
	MiniLoginByAuth(ctx context.Context, in *MiniAuthReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 图形验证码
	GetCaptcha(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CaptchaResp, error)
	// 验证码比对
	CaptchaCompare(ctx context.Context, in *CaptchaCheckReq, opts ...grpc.CallOption) (*CaptchaCheckResp, error)
	// 密码登录
	LoginByPassword(ctx context.Context, in *PasswordLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 注册
	UserRegister(ctx context.Context, in *Register, opts ...grpc.CallOption) (*LoginResp, error)
	// 发送短信验证码
	SendSms(ctx context.Context, in *SendSmsReq, opts ...grpc.CallOption) (*SendSmsResp, error)
	// 验证短信验证码
	CheckSms(ctx context.Context, in *CheckSmsReq, opts ...grpc.CallOption) (*CaptchaCheckResp, error)
}

type loginRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginRpcClient(cc grpc.ClientConnInterface) LoginRpcClient {
	return &loginRpcClient{cc}
}

func (c *loginRpcClient) MiniLoginByMobile(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/pb.LoginRpc/MiniLoginByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginRpcClient) MiniLoginByAuth(ctx context.Context, in *MiniAuthReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/pb.LoginRpc/MiniLoginByAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginRpcClient) GetCaptcha(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CaptchaResp, error) {
	out := new(CaptchaResp)
	err := c.cc.Invoke(ctx, "/pb.LoginRpc/GetCaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginRpcClient) CaptchaCompare(ctx context.Context, in *CaptchaCheckReq, opts ...grpc.CallOption) (*CaptchaCheckResp, error) {
	out := new(CaptchaCheckResp)
	err := c.cc.Invoke(ctx, "/pb.LoginRpc/CaptchaCompare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginRpcClient) LoginByPassword(ctx context.Context, in *PasswordLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/pb.LoginRpc/LoginByPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginRpcClient) UserRegister(ctx context.Context, in *Register, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/pb.LoginRpc/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginRpcClient) SendSms(ctx context.Context, in *SendSmsReq, opts ...grpc.CallOption) (*SendSmsResp, error) {
	out := new(SendSmsResp)
	err := c.cc.Invoke(ctx, "/pb.LoginRpc/SendSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginRpcClient) CheckSms(ctx context.Context, in *CheckSmsReq, opts ...grpc.CallOption) (*CaptchaCheckResp, error) {
	out := new(CaptchaCheckResp)
	err := c.cc.Invoke(ctx, "/pb.LoginRpc/CheckSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginRpcServer is the server API for LoginRpc service.
// All implementations must embed UnimplementedLoginRpcServer
// for forward compatibility
type LoginRpcServer interface {
	// 手机号登录
	MiniLoginByMobile(context.Context, *LoginReq) (*LoginResp, error)
	// 小程序登录
	MiniLoginByAuth(context.Context, *MiniAuthReq) (*LoginResp, error)
	// 图形验证码
	GetCaptcha(context.Context, *Empty) (*CaptchaResp, error)
	// 验证码比对
	CaptchaCompare(context.Context, *CaptchaCheckReq) (*CaptchaCheckResp, error)
	// 密码登录
	LoginByPassword(context.Context, *PasswordLoginReq) (*LoginResp, error)
	// 注册
	UserRegister(context.Context, *Register) (*LoginResp, error)
	// 发送短信验证码
	SendSms(context.Context, *SendSmsReq) (*SendSmsResp, error)
	// 验证短信验证码
	CheckSms(context.Context, *CheckSmsReq) (*CaptchaCheckResp, error)
	mustEmbedUnimplementedLoginRpcServer()
}

// UnimplementedLoginRpcServer must be embedded to have forward compatible implementations.
type UnimplementedLoginRpcServer struct {
}

func (UnimplementedLoginRpcServer) MiniLoginByMobile(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiniLoginByMobile not implemented")
}
func (UnimplementedLoginRpcServer) MiniLoginByAuth(context.Context, *MiniAuthReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiniLoginByAuth not implemented")
}
func (UnimplementedLoginRpcServer) GetCaptcha(context.Context, *Empty) (*CaptchaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaptcha not implemented")
}
func (UnimplementedLoginRpcServer) CaptchaCompare(context.Context, *CaptchaCheckReq) (*CaptchaCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptchaCompare not implemented")
}
func (UnimplementedLoginRpcServer) LoginByPassword(context.Context, *PasswordLoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByPassword not implemented")
}
func (UnimplementedLoginRpcServer) UserRegister(context.Context, *Register) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedLoginRpcServer) SendSms(context.Context, *SendSmsReq) (*SendSmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedLoginRpcServer) CheckSms(context.Context, *CheckSmsReq) (*CaptchaCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSms not implemented")
}
func (UnimplementedLoginRpcServer) mustEmbedUnimplementedLoginRpcServer() {}

// UnsafeLoginRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginRpcServer will
// result in compilation errors.
type UnsafeLoginRpcServer interface {
	mustEmbedUnimplementedLoginRpcServer()
}

func RegisterLoginRpcServer(s grpc.ServiceRegistrar, srv LoginRpcServer) {
	s.RegisterService(&LoginRpc_ServiceDesc, srv)
}

func _LoginRpc_MiniLoginByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginRpcServer).MiniLoginByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LoginRpc/MiniLoginByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginRpcServer).MiniLoginByMobile(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginRpc_MiniLoginByAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiniAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginRpcServer).MiniLoginByAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LoginRpc/MiniLoginByAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginRpcServer).MiniLoginByAuth(ctx, req.(*MiniAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginRpc_GetCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginRpcServer).GetCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LoginRpc/GetCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginRpcServer).GetCaptcha(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginRpc_CaptchaCompare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginRpcServer).CaptchaCompare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LoginRpc/CaptchaCompare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginRpcServer).CaptchaCompare(ctx, req.(*CaptchaCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginRpc_LoginByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginRpcServer).LoginByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LoginRpc/LoginByPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginRpcServer).LoginByPassword(ctx, req.(*PasswordLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginRpc_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Register)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginRpcServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LoginRpc/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginRpcServer).UserRegister(ctx, req.(*Register))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginRpc_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginRpcServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LoginRpc/SendSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginRpcServer).SendSms(ctx, req.(*SendSmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginRpc_CheckSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginRpcServer).CheckSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LoginRpc/CheckSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginRpcServer).CheckSms(ctx, req.(*CheckSmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginRpc_ServiceDesc is the grpc.ServiceDesc for LoginRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LoginRpc",
	HandlerType: (*LoginRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MiniLoginByMobile",
			Handler:    _LoginRpc_MiniLoginByMobile_Handler,
		},
		{
			MethodName: "MiniLoginByAuth",
			Handler:    _LoginRpc_MiniLoginByAuth_Handler,
		},
		{
			MethodName: "GetCaptcha",
			Handler:    _LoginRpc_GetCaptcha_Handler,
		},
		{
			MethodName: "CaptchaCompare",
			Handler:    _LoginRpc_CaptchaCompare_Handler,
		},
		{
			MethodName: "LoginByPassword",
			Handler:    _LoginRpc_LoginByPassword_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _LoginRpc_UserRegister_Handler,
		},
		{
			MethodName: "SendSms",
			Handler:    _LoginRpc_SendSms_Handler,
		},
		{
			MethodName: "CheckSms",
			Handler:    _LoginRpc_CheckSms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "login.proto",
}
